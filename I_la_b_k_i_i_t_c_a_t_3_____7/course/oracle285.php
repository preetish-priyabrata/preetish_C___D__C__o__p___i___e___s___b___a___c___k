<div id="course-content">    <div class="row gutter"><!-- row -->        <div class="col-lg-12 col-md-12">            <h1 class="page-title">Developing Applications With the Java SE 6 Platform &nbsp;&nbsp;<small>SL-285-SE6</small></h1><!-- category title -->        </div>    </div>    <hr/>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseOne" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    Duration                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseOne">            <div class = "panel-body">                <p>5 Days</p>            </div>        </div>    </div>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseTwo" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    What you will learn                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseTwo">            <div class = "panel-body">                <p>                    The Developing Applications With the Java SE Platform course provides students with practical experience in designing                    a vertical solution for a distributed, multi-tier application. The course takes students through the process of designing a                    multi-tier application in a case study approach ï¿½ requirements gathering, analysis and design, and development of the                    key components of the application. Students will design the application with a Model-View-Controller (MVC) pattern,                    implement testing with JUnit, create a Graphical User Interface (GUI) that supports logging, implement database                    connections with JDBC, create both client and server components, implement threading to enabling scaling of your                    application and use Remote Method Invocation (RMI) to communicate between objects on your client and server                    components.<br /><br />                    The course features the Java Platform, Standard Edition 6 (Java SE 6) technology and utilizes the Java SE                    Development Kit 6 (JDK 6) product. The students perform the course lab exercises using the NetBeans Integrated                    Development Environment (IDE).<br /><br />                    Students who can benefit from this course:<br />                    Developers continuing their education of the development of enterprise multi-tier applications after completing the Java                    Programming Language courseDevelopers pursuing the Sun Certified Developer for the Java 2 Platform certification                </p>             </div>        </div>    </div>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseThree" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    Prerequisites                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseThree">            <div class = "panel-body">                <p>                    <i>Required Prerequisites</i>                    <br />Develop applications by using the Java programming language                    <br />Program with sockets or streams                    <br />Understand GUI design                    <br />Understand basic Structured Query Language (SQL) statements                    <br />Understand basic Transmission Control Protocol/Internet Prot                    <br />Understand basic Unified Modeling Language (UML) diagrams                    <br />Understand how to implement interfaces and handle Java programming exceptions                    <br />Use object-oriented programming techniques                    <br /><br /><i>Suggested Prerequisites</i>                    <br />Fundamentals of the Java Programming Language, Java SE 6 (SL-110-SE6)                    <br />Java Programming Language, Java SE 6 (SL-275-SE6)                </p>             </div>        </div>    </div>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseFour" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    Course Objectives                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseFour">            <div class = "panel-body">                Apply Model View Controller (MVC) design pattern to create reusable classes                <br />Implement unit testing using JUnit                <br />Implement a program from the ground up that could be used in a commercial intranet application                <br />Develop classes to connect programs to Structured Query Language (SQL) database systems using the core aspects of the Java Organize and set up the GUI generation and event handling to support a Java technology project                <br />Implement the Logging API to generate log messages in GUI                <br />Create two-tier and three-tier Java technology applications                <br />Create a multithreaded server                <br />Create remote objects using Java Remote Method Invocation (Java RMI)            </div>        </div>    </div>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseFive" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    Course Topics                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseFive">            <div class = "panel-body">                <p>                    <b>Introduce the BrokerTool Application</b>                    <br />Explain the problem statement of the BrokerTool application                    <br />Creating and populating the StockMarket Database                    <br />Executing SQL Statements on the StockMarket Database                    <br /><br /><b>Apply the Model View Controller (MVC) Design Pattern</b>                    <br />Explain design patterns                    <br />Explain the MVC design pattern                    <br />Analyze how the MVC design pattern can be used in applications                    <br />Add MVC Interaction Code                    <br /><br /><b>Implement Unit Testing</b>                    <br />Develop unit test cases using JUnit                    <br />Execute Unit test cases                    <br />Open the InfoTool Project                    <br />Prepare JUnit Test Cases for the InfoTool Project                    <br />Analyze the JUnit Test Cases of the InfoController class of the InfoTool Project                    <br />Create and Analyze Test Methods Inside InfoToolTest.java File                    <br />Create a TestSuite of all the Test Cases of the InfoTool Project                    <br /><br /><b>Design the BrokerTool Application</b>                    <br />Apply the MVC design pattern                    <br />Begin the analysis and design of the project under study                    <br />Develop a build plan for the project                    <br />Create the MVC Participants                    <br />Establish the BrokerTool MVC Baseline                    <br /><br /><b>Implement the Java Database Connectivity (JDBC) API</b>                    <br />Describe the JDBC API                    <br />Explain how using the abstraction layer provided by the JDBC API makes a database front end portable across platforms                    <br />Describe the five major tasks involved with the JDBC programmer's interface                    <br />State the requirements of a JDBC driver and its relationship to the JDBC driver manager                    <br />Describe the data access objects (DAO) pattern and its applicability to a given scenario                    <br />Identify the Workflow and Object Interactions                    <br />Implement a Database-Connected Broker Model by Using the DAO Pattern                    <br /><br /><b>Create Graphical User Interfaces (GUI)</b>                    <br />Apply the principles of good GUI design                    <br />Design and implement a GUI for the project using Matisse                    <br />Apply the Composite Design pattern to build the BrokerTool GUI                    <br />Use JTable and JTabbedPane classes in your application to build a sophisticated GUI                    <br />Add AllCustomerTablePanel to the Palette Window and drag-and-drop to the BrokerGui Class                    <br />Create the CustomerPanel Class, add to the Palette Window and drag-and-drop to the BrokerGui Class                    <br />Change the Order of the Tabs                    <br />Compile and Test the BrokerGui Class                    <br /><br /><b>Handle GUI Events</b>                    <br />Implement a view class                    <br />Implement a controller class                    <br />Create the BrokerTool view Class                    <br />Create the BrokerTool Controller Class                    <br />Compile and Testing the BrokerGui Class                    <br />Add Event Handling Functionality                    <br /><br /><b>Log Messages in GUI</b>                    <br />Use the logging API                    <br />Examine a logging example                    <br />Write a custom handler                    <br />Set filters to a particular handler                    <br />Create the Custom Handler Class                    <br /><br /><b>Implement Multiple-Tier Design</b>                    <br />Compare the BrokerTool two-tier design with the three-tier design for the same application                    <br />Explain how you can use the Java technology package, java.net to implement networking applications                    <br />Demonstrate how to use the Command design pattern in the application                    <br />Apply the Strategy design pattern to create reusable code                    <br />Describe how you can implement the network client                    <br />Describe how you can implement the network server                    <br /><br /><b>Implement Advanced Multiple-Tier Design</b>                    <br />Use the new Java concurrency APIs to create a multithreaded server                    <br />Examine a thread pool                    <br />Identify integrity problems in multithreaded servers                    <br />Create a Generic Network Client Class                    <br /><br /><b>Communicate With Remote Objects Using Java RMI</b>                    <br />Create remote objects                    <br />Use Java RMI to create a multi-tier application                    <br />Deploy a Java RMI Implementation of the BrokerModel Interface                                    <br />Create a Java RMI Implementation of the BrokerView Interface                </p>             </div>        </div>    </div>    <div class = "panel panel-default">        <div class = "panel-heading">            <h4 class = "panel-title">                <a href = "#collapseSix" data-parent = "#accordion" data-toggle = "collapse" class = "accordion-toggle">                    Related Courses                </a>            </h4>        </div>        <div class = "panel-collapse collapse" id = "collapseSix">            <div class = "panel-body">                <p>                   Developing Applications for the Java SE Platform - Self-Study CD Course                </p>             </div>        </div>    </div></div>